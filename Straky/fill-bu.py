from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import csv
import json

# === P≈ôihla≈°ovac√≠ √∫daje ===
USERNAME = "P014920"
PASSWORD = "QEASd6GfazZu3Wp"
BUS_USERS_APP_URL = "https://my407083.s4hana.cloud.sap/ui#BusinessUser-maintain"

# === Spu≈°tƒõn√≠ Selenium ===
driver = webdriver.Chrome()
driver.maximize_window()
driver.get(BUS_USERS_APP_URL)

# === P≈ôihl√°≈°en√≠ ===
WebDriverWait(driver, 30).until(
    EC.presence_of_element_located((By.NAME, "j_username"))
)
driver.find_element(By.NAME, "j_username").send_keys(USERNAME)
driver.find_element(By.NAME, "j_password").send_keys(PASSWORD)
time.sleep(1)
driver.find_element(By.ID, "logOnFormSubmit").click()
print("‚úÖ P≈ôihl√°≈°en√≠ odesl√°no...")

# === Poƒçkat na inicializaci SAPUI5 ===
try:
    WebDriverWait(driver, 60).until(
        lambda d: d.execute_script("return typeof sap !== 'undefined' && sap.ui.getCore().isInitialized()")
    )
    print("‚úÖ SAPUI5 je inicializov√°no.")
except Exception as e:
    print(f"‚ö†Ô∏è SAPUI5 se nenaƒçetlo: {e}")

# === Poƒçkat na naƒçten√≠ vstupn√≠ch pol√≠ ===
try:
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.TAG_NAME, "input"))
    )
    print("‚úÖ Aplikace Maintain Business Users naƒçtena.")
except Exception as e:
    print(f"‚ö†Ô∏è Formul√°≈ô nebyl naƒçten: {e}")

# === Hled√°n√≠ pol√≠ z testovac√≠ho sc√©n√°≈ôe pomoc√≠ ID nebo aria-labelledby ===
search_fragments = {
    "First Name": "FirstNameMatchCode",
    "Last Name": "LastNameMatchCode"
}

matched_fields = []

# === Pro ka≈æd√Ω hledan√Ω n√°zev proveƒè vyhled√°n√≠ ===
for label, fragment in search_fragments.items():
    try:
        element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, f"//input[contains(@id,'{fragment}') or contains(@aria-labelledby,'{fragment}')]"))
        )
        matched_fields.append({
            "field": label,
            "id": element.get_attribute("id"),
            "aria-labelledby": element.get_attribute("aria-labelledby"),
            "value": element.get_attribute("value"),
            "tag": element.tag_name,
            "class": element.get_attribute("class")
        })
        print(f"‚úÖ Nalezeno pole pro: {label}")
    except Exception as e:
        print(f"‚ùå Nepoda≈ôilo se naj√≠t pole '{label}': {e}")

# === Ulo≈æit v√Ωstup ===
with open("bu_fields_from_scenario_by_id.csv", "w", newline='', encoding="utf-8") as f:
    writer = csv.DictWriter(f, fieldnames=["field", "id", "aria-labelledby", "value", "tag", "class"])
    writer.writeheader()
    writer.writerows(matched_fields)

with open("bu_fields_from_scenario_by_id.json", "w", encoding="utf-8") as f:
    json.dump(matched_fields, f, indent=2, ensure_ascii=False)

print("üìÑ Ulo≈æeno: bu_fields_from_scenario_by_id.csv a .json")

# === Screenshot pro kontrolu ===
driver.save_screenshot("business_user_screen.png")

# === Ukonƒçen√≠ ===
time.sleep(3)
driver.quit()
